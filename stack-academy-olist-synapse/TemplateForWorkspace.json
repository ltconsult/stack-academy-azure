{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "stack-academy-olist-synapse"
		},
		"stack-academy-olist-synapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'stack-academy-olist-synapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:stack-academy-olist-synapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"stack-academy-olist-synapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stackacademyoliststorage.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/stack-academy-olist-synapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('stack-academy-olist-synapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stack-academy-olist-synapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('stack-academy-olist-synapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP 100 * FROM\n    OPENROWSET(\n        BULK 'https://stackacademyoliststorage.dfs.core.windows.net/processing/orders.parquet/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [orders_pool]\n\nSELECT    \n    YEAR(order_purchase_timestamp) AS current_year,\n    COUNT(*) AS orders_per_year\n\nFROM\n    OPENROWSET(\n        BULK 'https://stackacademyoliststorage.dfs.core.windows.net/processing/orders.parquet/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [orders_year_pool]\n--WHERE orders_year_pool.filepath(1) >= '2016' AND orders_years_pool.filepath(1) <= '2018'\nGROUP BY YEAR(order_purchase_timestamp)\nORDER BY 1 DESC\n\n-- Drop database if it exists\nDROP DATABASE IF EXISTS olist_synapse\nGO\n\n-- Create new database\nCREATE DATABASE [olist_synapse];\nGO\n\nuse olist_synapse\nGO\n\n-- There is no credential in data surce. We are using public storage account which doesn't need a secret.\nCREATE EXTERNAL DATA SOURCE OlistDataLake\nWITH ( LOCATION = 'https://stackacademyoliststorage.dfs.core.windows.net/')\nGO\n\nDROP VIEW IF EXISTS olistOrders;\nGO\n\nCREATE VIEW olistOrders AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'processing/orders.parquet/*.parquet',\n        DATA_SOURCE = 'OlistDataLake',\n        FORMAT='PARQUET'\n    ) AS ord;\n\nGO\n\nSELECT * FROM olistOrders\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE OR ALTER PROC CreateSQLServerlessOrdersView\nAS\nBEGIN\n\nDECLARE @statement VARCHAR(MAX) = \n'\nCREATE OR ALTER VIEW olistOrders AS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK ''processing/orders.parquet/*.parquet'',\n        DATA_SOURCE = ''OlistDataLake'',\n        FORMAT=''PARQUET''\n    ) AS ord;\n'\nPRINT @statement\n\nEXEC (@statement)\n\nEND\nGO\n\nEXEC CreateSQLServerlessOrdersView\n\nSELECT * FROM olistOrders",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "olist_synapse",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}